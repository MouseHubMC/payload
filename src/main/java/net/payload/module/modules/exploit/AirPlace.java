/**
 * AntiCactus Module
 */
package net.payload.module.modules.exploit;

import net.minecraft.item.BlockItem;
import net.minecraft.item.SpawnEggItem;
import net.minecraft.network.packet.c2s.play.PlayerActionC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.hit.HitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Direction;
import net.payload.Payload;
import net.payload.event.events.Render3DEvent;
import net.payload.event.events.TickEvent;
import net.payload.event.listeners.Render3DListener;
import net.payload.event.listeners.TickListener;
import net.payload.gui.colors.Color;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.types.BooleanSetting;
import net.payload.settings.types.ColorSetting;
import net.payload.settings.types.FloatSetting;
import net.payload.utils.block.BlockUtils;
import net.payload.utils.render.Render3D;

public class AirPlace extends Module implements TickListener, Render3DListener {

    private ColorSetting blockcolor = ColorSetting.builder()
            .id("airplace_color")
            .displayName("Block Color")
            .defaultValue(new Color(255, 167, 57, 100))
            .build();

    public BooleanSetting render = BooleanSetting.builder()
            .id("airplace_render")
            .displayName("Render")
            .description("shows visual")
            .defaultValue(false)
            .build();

    public FloatSetting lineThickness = FloatSetting.builder()
            .id("airplace_thickness")
            .displayName("Line Thickness")
            .defaultValue(2f)
            .minValue(0f)
            .maxValue(5f)
            .step(0.1f)
            .build();

    public BooleanSetting grimBypass = BooleanSetting.builder()
            .id("airplace_grim")
            .displayName("Grim Bypass")
            .description("Bypass for GrimAC")
            .defaultValue(false)
            .build();

    public BooleanSetting customRange = BooleanSetting.builder()
            .id("airplace_customrange")
            .displayName("Custom Range")
            .description("shows visual")
            .defaultValue(false)
            .build();

    public FloatSetting range = FloatSetting.builder()
            .id("airplace_range")
            .displayName("Range")
            .description("is range")
            .defaultValue(5f)
            .minValue(1.0f)
            .maxValue(6.0f)
            .step(1f)
            .build();

    private HitResult hitResult;

    public AirPlace() {
        super("AirPlace");

        this.setName("AirPlace");
        this.setCategory(Category.of("exploit"));
        this.setDescription("Allows for placement in the air");

        this.addSetting(render);
        this.addSetting(grimBypass);
        this.addSetting(customRange);
        this.addSetting(range);
        this.addSetting(blockcolor);
        this.addSetting(lineThickness);
    }

    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(Render3DListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(TickListener.class, this);
    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(Render3DListener.class, this);
        Payload.getInstance().eventManager.AddListener(TickListener.class, this);
    }

    @Override
    public void onToggle() {

    }

    @Override
    public void onTick(TickEvent.Pre event) {
    }

    @Override
    public void onTick(TickEvent.Post event) {
        double r = customRange.getValue() ? range.getValue() : MC.player.getBlockInteractionRange();
        hitResult = MC.getCameraEntity().raycast(r, 0, false);

        if (!(hitResult instanceof BlockHitResult blockHitResult) || !(MC.player.getMainHandStack().getItem() instanceof BlockItem) && !(MC.player.getMainHandStack().getItem() instanceof SpawnEggItem))
            return;

        if (MC.options.useKey.isPressed()) {
            Hand hand = Hand.MAIN_HAND;

            if (grimBypass.getValue()) {
                MC.getNetworkHandler().sendPacket(
                        new PlayerActionC2SPacket(
                                PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND,
                                new BlockPos(0, 0, 0),
                                Direction.DOWN));
                hand = Hand.OFF_HAND;
            }

            BlockUtils.place(blockHitResult.getBlockPos(), hand, MC.player.getInventory().selectedSlot, false,
                    0, true, true, false);

            if (grimBypass.getValue()) {
                MC.getNetworkHandler().sendPacket(
                        new PlayerActionC2SPacket(
                                PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND,
                                new BlockPos(0, 0, 0),
                                Direction.DOWN));
            }
        }
    }

    @Override
    public void onRender(Render3DEvent event) {
            if (!(hitResult instanceof BlockHitResult blockHitResult)
                    || !MC.world.getBlockState(blockHitResult.getBlockPos()).isReplaceable()
                    || !(MC.player.getMainHandStack().getItem() instanceof BlockItem)
                    && !(MC.player.getMainHandStack().getItem() instanceof SpawnEggItem)
                    || !render.getValue())
                return;

            Box box = new Box(new BlockPos(blockHitResult.getBlockPos()));
            Render3D.draw3DBox(event.GetMatrix(), event.getCamera(),box, blockcolor.getValue(), lineThickness.getValue().floatValue());
           // Render3D.drawText3D(MC.player.getName() + " Did a thing", box.getCenter(), java.awt.Color.white);
    }
}
