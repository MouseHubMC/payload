package net.payload.module.modules.exploit;

import net.minecraft.client.MinecraftClient;
import net.minecraft.client.network.ClientPlayerEntity;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.minecraft.util.math.Box;
import net.minecraft.util.math.Vec3d;
import net.payload.Payload;
import net.payload.event.events.*;
import net.payload.event.listeners.*;
import net.payload.gui.colors.Color;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.types.BooleanSetting;
import net.payload.settings.types.ColorSetting;
import net.payload.settings.types.FloatSetting;
import net.payload.utils.entity.FakePlayerEntity;
import net.payload.utils.render.Render3D;

import java.util.UUID;

public class ChorusExploit extends Module implements PlayerMoveEventListener, TickListener, ReceivePacketListener, SendPacketListener, Render3DListener, PlayerDeathListener {

    Vec3d chorusPos = null;
    PlayerPositionLookS2CPacket chorusPacket = null;
    boolean isEatingChorus = false;
    int chorusTicks = 0;
    private FakePlayerEntity fakePlayer;
    boolean triggerSpawn = false;
    int fakePlayerCount = 0;

    private MinecraftClient mc = MinecraftClient.getInstance();

    private ColorSetting blockcolor = ColorSetting.builder()
            .id("chorus_color")
            .displayName("Block Color")
            .defaultValue(new Color(255, 167, 57, 100))
            .build();

    public BooleanSetting render = BooleanSetting.builder()
            .id("chorus_render")
            .displayName("Render")
            .description("shows visual")
            .defaultValue(false)
            .build();

    public BooleanSetting renderFakePlayer = BooleanSetting.builder()
            .id("chorus_renderfakeplayer")
            .displayName("Fake Player")
            .description("shows player")
            .defaultValue(true)
            .build();

    public FloatSetting lineThickness = FloatSetting.builder()
            .id("chorus_thickness")
            .displayName("Line Thickness")
            .defaultValue(2f)
            .minValue(0f)
            .maxValue(5f)
            .step(0.1f)
            .build();

    public ChorusExploit() {
        super("ChorusExploit");

        this.setCategory(Category.of("exploit"));
        this.setDescription("Gives you control over where a chorusfruit will tp you");

        this.addSetting(blockcolor);
        this.addSetting(lineThickness);
        this.addSetting(render);
        this.addSetting(renderFakePlayer);
    }



    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(TickListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(PlayerMoveEventListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(ReceivePacketListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(SendPacketListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(Render3DListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(PlayerDeathListener.class, this);

        triggerSpawn = false;
        if (fakePlayer != null) {
            fakePlayer.despawn();
            fakePlayer = null;
            fakePlayerCount = 0;
        }

        if (chorusPacket != null) {
            chorusPacket.apply(mc.getNetworkHandler());
            reset();
        }
    }

    private void reset() {
        chorusPacket = null;
        chorusPos = null;
        fakePlayerCount = 0;
    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(TickListener.class, this);
        Payload.getInstance().eventManager.AddListener(PlayerMoveEventListener.class, this);
        Payload.getInstance().eventManager.AddListener(ReceivePacketListener.class, this);
        Payload.getInstance().eventManager.AddListener(SendPacketListener.class, this);
        Payload.getInstance().eventManager.AddListener(Render3DListener.class, this);
        Payload.getInstance().eventManager.AddListener(PlayerDeathListener.class, this);
    }

    @Override
    public void onToggle() {
    }

    @Override
    public void onTick(TickEvent.Pre event) {
        if (nullCheck()) return;

        if (mc.player.getActiveItem() == null) return;
        if (mc.player.getActiveItem().getItem() == Items.CHORUS_FRUIT) {
            isEatingChorus = true;
        } else if (isEatingChorus) {
            chorusTicks++;
            if (chorusTicks > 5) {
                isEatingChorus = false;
                chorusTicks = 0;
            }
        }

        if (triggerSpawn && fakePlayerCount < 1 && renderFakePlayer.getValue()) {
            ClientPlayerEntity player = MC.player;
            fakePlayer = new FakePlayerEntity();
            fakePlayer.copyFrom(player);
            fakePlayer.setUuid(UUID.randomUUID());
            fakePlayer.headYaw = player.headYaw;
            fakePlayer.bodyYaw = player.bodyYaw;
            fakePlayer.setPitch(player.getPitch());
            MC.world.addEntity(fakePlayer);
            fakePlayerCount++;
        }

    }

    @Override
    public void onTick(TickEvent.Post event) {
        if (nullCheck()) return;

        if (fakePlayer != null && renderFakePlayer.getValue()) {
            ClientPlayerEntity player = MC.player;
            fakePlayer.setHeadYaw(0);
            fakePlayer.setBodyYaw(0);
            fakePlayer.setVelocity(player.getVelocity());
            fakePlayer.setPosition(chorusPos);
            fakePlayer.setUuid(player.getUuid());
        }
    }

    @Override
    public void onReceivePacket(ReceivePacketEvent readPacketEvent) {
        if (nullCheck()) return;

        if (readPacketEvent.GetPacket() instanceof PlayerPositionLookS2CPacket) {
            if (isEatingChorus || chorusPos != null) {
                chorusPacket = readPacketEvent.getPacket();
                chorusPos = new Vec3d(chorusPacket.change().position().x, chorusPacket.change().position().y, chorusPacket.change().position().z);
                readPacketEvent.cancel();
            }
        }
    }

    @Override
    public void onSendPacket(SendPacketEvent event) {
        if (nullCheck()) return;

        if (chorusPacket != null)
            if (event.GetPacket() instanceof PlayerMoveC2SPacket
                    || event.GetPacket() instanceof PlayerMoveC2SPacket.Full
                    || event.GetPacket() instanceof PlayerMoveC2SPacket.LookAndOnGround
                    || event.GetPacket() instanceof PlayerMoveC2SPacket.OnGroundOnly
                    || event.GetPacket() instanceof PlayerMoveC2SPacket.PositionAndOnGround
            ) event.cancel();
         }

    @Override
    public void onRender(Render3DEvent event) {
        if (nullCheck()) return;

        if (chorusPacket != null && render.getValue()) {
            Box box = new Box(chorusPos.getX() - 0.3, chorusPos.getY(), chorusPos.getZ() - 0.3, chorusPos.getX() + 0.3, chorusPos.getY() + 1.85, chorusPos.getZ() + 0.3);
            Render3D.draw3DBox(event.GetMatrix(), event.getCamera(), box, blockcolor.getValue(), lineThickness.getValue().floatValue());
        }
    }

    @Override
    public void onMove(PlayerMoveEvent event) {
        if (chorusPos != null) {
            event.cancel();
            triggerSpawn = true;
        } else if (renderFakePlayer.getValue()){
            triggerSpawn = false;
            if (fakePlayer != null) {
                fakePlayer.despawn();
                fakePlayer = null;
                fakePlayerCount = 0;
            }
        }
    }

    @Override
    public void onPlayerDeath(PlayerDeathEvent event) {
        if (this.state.getValue()) {
            this.toggle();
        }
    }
}