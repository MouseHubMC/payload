package net.payload.module.modules.exploit;

import it.unimi.dsi.fastutil.ints.IntListIterator;
import java.util.ArrayList;
import java.util.List;

import net.minecraft.network.packet.Packet;
import net.minecraft.network.packet.s2c.play.EntitiesDestroyS2CPacket;
import net.minecraft.entity.projectile.FireworkRocketEntity;
import net.minecraft.network.packet.s2c.play.PlayerPositionLookS2CPacket;
import net.payload.Payload;
import net.payload.event.events.*;
import net.payload.event.listeners.*;
import net.payload.mixin.AccessorFireworkRocketEntity;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.types.BooleanSetting;
import net.payload.settings.types.FloatSetting;
import net.payload.utils.math.CacheTimer;

public class FireworkPlus extends Module implements TickListener, ReceivePacketListener, SendPacketListener, RemoveFireworkListener, EntityVelocityUpdateListener {

    private BooleanSetting oldGrim = BooleanSetting.builder()
            .id("fireworkplus_oldgrim")
            .displayName("GrimAC")
            .defaultValue(true)
            .build();

    private BooleanSetting rubberbandBoost = BooleanSetting.builder()
            .id("fireworkplus_boost")
            .displayName("2B2T Lag Boost")
            .defaultValue(false)
            .build();

    private BooleanSetting rubberbanding = BooleanSetting.builder()
            .id("fireworkplus_rubberbanding")
            .displayName("Lag Check")
            .defaultValue(true)
            .build();

    private final FloatSetting timedlag = FloatSetting.builder()
            .id("fireworkplus_lagdisable")
            .displayName("lagboost in sec")
            .defaultValue(5f)
            .minValue(0f)
            .maxValue(10f)
            .step(1f)
            .build();

    private final FloatSetting timedisable = FloatSetting.builder()
            .id("fireworkplus_disable")
            .displayName("Disable in sec")
            .defaultValue(10f)
            .minValue(0f)
            .maxValue(20f)
            .step(0.25f)
            .build();

    private final List<Packet<?>> packetList = new ArrayList<>();
    private boolean extendFirework;
    private final CacheTimer extendFireworkTimer = new CacheTimer();
    private final CacheTimer extendLagBoost = new CacheTimer();
    private FireworkRocketEntity firework;
    private RemoveFireworkEvent removeFireworkEvent;
    private boolean lagReady;


    public FireworkPlus() {

        super("FireworkPlus");
        this.setName("Firework+");
        this.setCategory(Category.of("exploit"));
        this.setDescription("Allows for control over the duration and effect of fireworks");

        this.addSetting(oldGrim);
        this.addSetting(timedisable);
        this.addSetting(rubberbanding);
        this.addSetting(rubberbandBoost);
        this.addSetting(timedlag);
    }


    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(TickListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(RemoveFireworkListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(ReceivePacketListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(SendPacketListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(EntityVelocityUpdateListener.class, this);

       /* if (firework != null) {
                ((AccessorFireworkRocketEntity) firework).hookExplodeAndRemove((ServerWorld) firework.getEntityWorld());
            } */

        if (firework != null) {
            firework.discard();
        }

        firework = null;
        extendFirework = false;

        for (Packet<?> packet : packetList) {
            sendPacket(packet);
        }

        packetList.clear();
    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(TickListener.class, this);
        Payload.getInstance().eventManager.AddListener(RemoveFireworkListener.class, this);
        Payload.getInstance().eventManager.AddListener(ReceivePacketListener.class, this);
        Payload.getInstance().eventManager.AddListener(SendPacketListener.class, this);
        Payload.getInstance().eventManager.AddListener(EntityVelocityUpdateListener.class, this);

    }

    @Override
    public void onToggle() {

    }

    @Override
    public void OnRemoveFirework(RemoveFireworkEvent event) {
        if (MC.player != null && MC.player.isAlive()) {
            if (firework != event.getRocketEntity() && ((AccessorFireworkRocketEntity) event.getRocketEntity()).hookWasShotByEntity()
                    && ((AccessorFireworkRocketEntity) event.getRocketEntity()).getShooter() == MC.player) {
                extendFirework = true;
                event.cancel();
                firework = event.getRocketEntity();
                extendFireworkTimer.reset();
            }
        }
    }

    @Override
    public void onTick(TickEvent.Pre event) {
        if (nullCheck()) return;

        if (extendFirework) {
            if (!MC.player.isGliding() || !MC.player.isAlive() || MC.player.isCreative() || extendFireworkTimer.passed(timedisable.getValue() * 1000) || MC.player.isOnGround()) {
                extendFirework = false;

                if (firework != null) {
                        firework.discard();
                    }
                    firework = null;

                for (Packet<?> packet : packetList) {
                    sendPacket(packet);
                }

                packetList.clear();
                lagReady = true;
                extendLagBoost.reset();
            }
        }
    }



    private void sendPacket(Packet<?> packet) {
        if (MC.getNetworkHandler() != null) { // Check if the network handler is available
            MC.getNetworkHandler().sendPacket(packet); // Send the packet directly
        }
    }

    public boolean isGrimAC() {
        return oldGrim.getValue();
    }

    public boolean isExtendingFirework() {
        return extendFirework;
    }

    @Override
    public void onTick(TickEvent.Post event) {

    }

    @Override
    public void onReceivePacket(ReceivePacketEvent readPacketEvent) {
        if (MC.player != null && MC.world != null && MC.player.isAlive() && extendFirework) {
            Packet<?> packet = readPacketEvent.GetPacket();
            if (packet instanceof EntitiesDestroyS2CPacket) {
                if (firework != null) {
                    IntListIterator ids = ((EntitiesDestroyS2CPacket) packet).getEntityIds().iterator();
                    while (ids.hasNext()) {
                        int id = ids.nextInt();
                        if (id == firework.getId()) {
                            readPacketEvent.cancel();
                            return;
                        }
                    }
                }
            }

            if (rubberbanding.getValue() && packet instanceof PlayerPositionLookS2CPacket) {
                extendFirework = false;

                if (firework != null) {
                    firework.discard();
                }
                firework = null;

                for (Packet p : this.packetList) {
                    sendPacket(p);
                }

                packetList.clear();
                lagReady = true;
                extendLagBoost.reset();
            }
        }
    }

    @Override
    public void onSendPacket(SendPacketEvent event) {
        if (MC.player != null && MC.world != null) {
            Packet<?> packet = event.GetPacket();
            if (packet instanceof FireworkRocketEntity) {
                if (extendFirework && MC.player.isAlive()) {
                    packetList.add(packet);
                }
            }
        }
    }

    @Override
    public void onUpdateVel(EntityVelocityUpdateEvent event) {
        if (lagReady && rubberbandBoost.getValue() && !extendLagBoost.passed(timedlag.getValue() * 1000) && MC.player.isGliding()) {

            if (firework != null) {
                firework.discard();
            }

            event.cancel();
        }
    }
}
