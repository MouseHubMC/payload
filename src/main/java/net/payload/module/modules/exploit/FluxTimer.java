/**
 * Timer Module
 */
package net.payload.module.modules.exploit;

import net.payload.Payload;
import net.payload.event.events.TickEvent;
import net.payload.event.listeners.TickListener;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.types.FloatSetting;
import net.payload.utils.math.CacheTimer;

public class FluxTimer extends Module implements TickListener {

    private final CacheTimer fluxTimer = new CacheTimer();

    boolean isNormal = false;

    private final FloatSetting multiplier = FloatSetting.builder()
    		.id("fluxtimer_multiplier")
    		.displayName("Multiplier")
    		.description("The multiplier that will affect the game speed.")
    		.defaultValue(1f)
    		.minValue(0.1f)
    		.maxValue(3.0f)
    		.step(0.1f)
    		.build();

    private final FloatSetting turnOn = FloatSetting.builder()
            .id("fluxtimer_clock")
            .displayName("Seconds b4 Enable")
            .description("The multiplier that will affect the game speed.")
            .defaultValue(2f)
            .minValue(0f)
            .maxValue(10f)
            .step(0.1f)
            .build();

    private final FloatSetting turnOff = FloatSetting.builder()
            .id("fluxtimer_clock2")
            .displayName("Seconds b4 Disable")
            .description("The multiplier that will affect the game speed.")
            .defaultValue(1f)
            .minValue(0f)
            .maxValue(10f)
            .step(0.1f)
            .build();

    public FluxTimer() {
    	super("FluxTimer");

        this.setName("FluxTimer");
        this.setCategory(Category.of("Exploit"));
        this.setDescription("Timer but alternating between two values");
        //this.setdescription("Increases the speed of Minecraft.");
        this.addSetting(multiplier);
        this.addSetting(turnOn);
        this.addSetting(turnOff);
    }

    public float getMultiplier() {
        return this.multiplier.getValue().floatValue();
    }

    public boolean isNormal() {
        return this.isNormal;
    }

    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(TickListener.class, this);

    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(TickListener.class, this);

        this.fluxTimer.reset();
    }

    @Override
    public void onToggle() {
    }

    @Override
    public void onTick(TickEvent.Pre event) {

        float TimeToToggleOn = this.turnOn.getValue().floatValue();

        float TimeToToggleOff = this.turnOff.getValue().floatValue();

        if (isNormal && this.fluxTimer.passed(TimeToToggleOn * 1000)) {
                isNormal = false;
                this.fluxTimer.reset();
        }

       if (!isNormal && this.fluxTimer.passed(TimeToToggleOff * 1000)) {
                isNormal = true;
                this.fluxTimer.reset();
        }

    }

    @Override
    public void onTick(TickEvent.Post event) {

    }
}