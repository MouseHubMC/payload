package net.payload.module.modules.exploit;

import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.payload.Payload;
import net.payload.event.events.SendPacketEvent;
import net.payload.event.listeners.SendPacketListener;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.types.BooleanSetting;
import net.payload.settings.types.FloatSetting;
import net.payload.utils.math.CacheTimer;

public class PacketControl extends Module implements SendPacketListener {

    // CacheTimer Bypass Settings
    public final BooleanSetting TimerBypass = BooleanSetting.builder()
            .id("packet_timer_bypass")
            .displayName("Timer Bypass")
            .description("Enables CacheTimer bypass functionality")
            .defaultValue(true)
            .build();

    public final FloatSetting fullPackets = FloatSetting.builder()
            .id("packet_full_packets")
            .displayName("Full Packets")
            .description("Number of full packets to send")
            .defaultValue(15f)
            .minValue(1f)
            .maxValue(50f)
            .step(1f)
            .build();

    public final FloatSetting positionPackets = FloatSetting.builder()
            .id("packet_position_packets")
            .displayName("Position Packets")
            .description("Number of position packets to send")
            .defaultValue(15f)
            .minValue(1f)
            .maxValue(50f)
            .step(1f)
            .build();

    // Sync Settings
    public final BooleanSetting groundSync = BooleanSetting.builder()
            .id("packet_ground_sync")
            .displayName("Ground Sync")
            .description("Synchronizes ground state")
            .defaultValue(true)
            .build();

    public final FloatSetting groundDelay = FloatSetting.builder()
            .id("packet_ground_delay")
            .displayName("Ground Delay")
            .description("Delay for ground synchronization")
            .defaultValue(500f)
            .minValue(0f)
            .maxValue(2000f)
            .step(1f)
            .build();

    public final BooleanSetting rotationSync = BooleanSetting.builder()
            .id("packet_rotation_sync")
            .displayName("Rotation Sync")
            .description("Synchronizes rotation state")
            .defaultValue(true)
            .build();

    public final FloatSetting rotationDelay = FloatSetting.builder()
            .id("packet_rotation_delay")
            .displayName("Rotation Delay")
            .description("Delay for rotation synchronization")
            .defaultValue(500f)
            .minValue(0f)
            .maxValue(2000f)
            .step(1f)
            .build();

    public final BooleanSetting positionSync = BooleanSetting.builder()
            .id("packet_position_sync")
            .displayName("Position Sync")
            .description("Synchronizes position state")
            .defaultValue(true)
            .build();

    public final FloatSetting positionDelay = FloatSetting.builder()
            .id("packet_position_delay")
            .displayName("Position Delay")
            .description("Delay for position synchronization")
            .defaultValue(500f)
            .minValue(0f)
            .maxValue(2000f)
            .step(1f)
            .build();

    // State variables
    public int fullPacket;
    public int positionPacket;
    public boolean full;
    public final CacheTimer groundCacheTimer = new CacheTimer();
    public final CacheTimer rotationCacheTimer = new CacheTimer();
    public final CacheTimer positionCacheTimer = new CacheTimer();

    public PacketControl() {
        super("PacketControl");
        this.setCategory(Category.of("Exploit"));
        this.setDescription("Controls packet sending behavior");

        // Add settings
        this.addSetting(TimerBypass);
        this.addSetting(fullPackets);
        this.addSetting(positionPackets);
        this.addSetting(groundSync);
        this.addSetting(groundDelay);
        this.addSetting(rotationSync);
        this.addSetting(rotationDelay);
        this.addSetting(positionSync);
        this.addSetting(positionDelay);
    }

    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(SendPacketListener.class, this);
        resetState();
    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(SendPacketListener.class, this);
        resetState();
    }

    @Override
    public void onToggle() {
        // Implementation if needed
    }

    public void resetState() {
        fullPacket = 0;
        positionPacket = 0;
        full = false;
        groundCacheTimer.reset();
        rotationCacheTimer.reset();
        positionCacheTimer.reset();
    }

    @Override
    public void onSendPacket(SendPacketEvent event) {
        if (event.GetPacket() instanceof PlayerMoveC2SPacket packet) {
            if (packet.changesPosition()) {
                positionCacheTimer.reset();
            }
            if (packet.changesLook()) {
                rotationCacheTimer.reset();
            }
            groundCacheTimer.reset();

            if (TimerBypass.getValue()) {
                if (packet instanceof PlayerMoveC2SPacket.PositionAndOnGround && !full) {
                    positionPacket++;
                    if (positionPacket >= positionPackets.getValue()) {
                        positionPacket = 0;
                        full = true;
                    }
                } else if (packet instanceof PlayerMoveC2SPacket.Full && full) {
                    fullPacket++;
                    if (fullPacket > fullPackets.getValue()) {
                        fullPacket = 0;
                        full = false;
                    }
                }
            }
        }
    }
}