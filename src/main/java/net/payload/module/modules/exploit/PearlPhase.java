package net.payload.module.modules.exploit;

import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.math.MathHelper;
import net.minecraft.util.math.Vec3d;
import net.payload.Payload;
import net.payload.event.events.LookAtEvent;
import net.payload.event.events.SendMovementPacketEvent;
import net.payload.event.events.TickEvent;
import net.payload.event.listeners.LookAtListener;
import net.payload.event.listeners.SendMovementPacketListener;
import net.payload.event.listeners.TickListener;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.module.modules.client.AntiCheat;
import net.payload.settings.types.BooleanSetting;
import net.payload.settings.types.FloatSetting;
import net.payload.utils.entity.InventoryUtil;
import net.payload.utils.player.combat.EntityUtil;

public class PearlPhase extends Module implements TickListener, SendMovementPacketListener, LookAtListener {

    private final BooleanSetting autoYaw = BooleanSetting.builder()
            .id("pearlphase_autoyaw")
            .displayName("AutoYaw")
            .defaultValue(true)
            .build();

    private final BooleanSetting rotation = BooleanSetting.builder()
            .id("pearlphase_rotation")
            .displayName("Rotation")
            .defaultValue(true)
            .build();

    private final FloatSetting fov = FloatSetting.builder()
            .id("pearlphase_fov")
            .displayName("Fov")
            .defaultValue(10.0f)
            .minValue(0.0f)
            .maxValue(50.0f)
            .step(5f)
            .build();

    private final FloatSetting priority = FloatSetting.builder()
            .id("pearlphase_priority")
            .displayName("Priority")
            .defaultValue(100.0f)
            .minValue(0.0f)
            .maxValue(100.0f)
            .build();

    private final BooleanSetting invswap = BooleanSetting.builder()
            .id("pearlphase_invswap")
            .displayName("InvSwap")
            .defaultValue(true)
            .build();

    private final BooleanSetting sync = BooleanSetting.builder()
            .id("pearlphase_sync")
            .displayName("Sync")
            .defaultValue(true)
            .build();

    private final BooleanSetting bypass = BooleanSetting.builder()
            .id("pearlphase_bypass")
            .displayName("Bypass")
            .defaultValue(true)
            .build();

    boolean throwing = false;

    public Vec3d directionVec = null;
    
    public PearlPhase() {
        super("PearlPhase");

        this.setName("PearlPhase");
        this.setCategory(Category.of("exploit"));
        this.setDescription("Throws a pearl to clip you through blocks, mainly used in CPVP");
        this.addSetting(autoYaw);
        this.addSetting(rotation);
        this.addSetting(fov);
        this.addSetting(priority);
        this.addSetting(invswap);
        this.addSetting(sync);
        this.addSetting(bypass);
    }


    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(TickListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(SendMovementPacketListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(LookAtListener.class, this);

    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(TickListener.class, this);
        Payload.getInstance().eventManager.AddListener(SendMovementPacketListener.class, this);
        Payload.getInstance().eventManager.AddListener(LookAtListener.class, this);

        directionVec = null;
        if (nullCheck()) {
            this.toggle();
            return;
        }
        updatePos();
        if (rotation.getValue()) {
            return;
        }
        if (sync.getValue()) {
            throwPearl(autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80);
        } else {
            throwPearl();
        }
        if (this.state.getValue()) {
            toggle();
        }
    }

    private boolean faceVector(Vec3d directionVec) {
        this.directionVec = directionVec;
        return Payload.getInstance().rotationManager.inFov(directionVec, fov.getValue());
/*		float[] angle = EntityUtil.getLegitRotations(directionVec);
        return Payload.getInstance().rotationManager.inFov(angle[0], bypass.getValue() ? 89 : 80, fov.getValueFloat());*/
    }

    @Override
    public void onToggle() {

    }

    @Override
    public void onLook(LookAtEvent event) {
        if (directionVec != null) {
            event.setTarget(directionVec, Payload.getInstance().moduleManager.rotations.steps.get(), priority.get());
/*			float[] angle = EntityUtil.getLegitRotations(directionVec);
			event.setTarget(angle[0], bypass.getValue() ? 89 : 80, steps.getValueFloat(), priority.getValueFloat());*/
        }
    }

    @Override
    public void onSendMovementPacket(SendMovementPacketEvent.Pre event) {
        updatePos();
        if (!faceVector(targetPos)) {
            return;
        }
        if (sync.getValue()) {
            throwPearl(autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80);
        } else {
            throwPearl();
        }
        if (this.state.getValue()) {
            this.toggle();
        }
    }

    @Override
    public void onSendMovementPacket(SendMovementPacketEvent.Post event) {

    }

    Vec3d targetPos;

    private void updatePos() {
        targetPos = new Vec3d(MC.player.getX() + MathHelper.clamp(roundToClosest(MC.player.getX(), Math.floor(MC.player.getX()) + 0.241, Math.floor(MC.player.getX()) + 0.759) - MC.player.getX(), -0.2, 0.2), MC.player.getY() - 0.5, MC.player.getZ() + MathHelper.clamp(roundToClosest(MC.player.getZ(), Math.floor(MC.player.getZ()) + 0.241, Math.floor(MC.player.getZ()) + 0.759) - MC.player.getZ(), -0.2, 0.2));
    }

    @Override
    public void onTick(TickEvent.Pre event) {
        updatePos();
        if (!faceVector(targetPos)) {
            return;
        }
        throwPearl();
        if (this.state.getValue()) {
            this.toggle();
        }
    }

    @Override
    public void onTick(TickEvent.Post event) {

    }

    public void throwPearl(float yaw, float pitch) {
        throwing = true;
        int pearl;
        if (MC.player.getMainHandStack().getItem() == Items.ENDER_PEARL) {
            Payload.getInstance().rotationManager.snapAt(yaw, pitch);
            sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80));
            if (AntiCheat.INSTANCE.snapBack.getValue()) {
                Payload.getInstance().rotationManager.snapBack();
            }
        } else if (invswap.getValue() && (pearl = InventoryUtil.findItemInventorySlot(Items.ENDER_PEARL)) != -1) {
            InventoryUtil.inventorySwap(pearl, MC.player.getInventory().selectedSlot);
            Payload.getInstance().rotationManager.snapAt(yaw, pitch);
            sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80));
            InventoryUtil.inventorySwap(pearl, MC.player.getInventory().selectedSlot);
            EntityUtil.syncInventory();
            if (AntiCheat.INSTANCE.snapBack.getValue()) {
                Payload.getInstance().rotationManager.snapBack();
            }
        } else if ((pearl = InventoryUtil.findItem(Items.ENDER_PEARL)) != -1) {
            int old = MC.player.getInventory().selectedSlot;
            InventoryUtil.switchToSlot(pearl);
            Payload.getInstance().rotationManager.snapAt(yaw, pitch);
            sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80));
            InventoryUtil.switchToSlot(old);
            if (AntiCheat.INSTANCE.snapBack.getValue()) {
                Payload.getInstance().rotationManager.snapBack();
            }
        }
        throwing = false;
    }

    public void throwPearl() {
        throwing = true;
        int pearl;
        if (MC.player.getMainHandStack().getItem() == Items.ENDER_PEARL) {
            sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80));
        } else if (invswap.getValue() && (pearl = InventoryUtil.findItemInventorySlot(Items.ENDER_PEARL)) != -1) {
            InventoryUtil.inventorySwap(pearl, MC.player.getInventory().selectedSlot);
            sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80));
            InventoryUtil.inventorySwap(pearl, MC.player.getInventory().selectedSlot);
            EntityUtil.syncInventory();
        } else if ((pearl = InventoryUtil.findItem(Items.ENDER_PEARL)) != -1) {
            int old = MC.player.getInventory().selectedSlot;
            InventoryUtil.switchToSlot(pearl);
            sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, autoYaw.getValue() ? Payload.getInstance().rotationManager.getRotation(targetPos)[0] : MC.player.getYaw(), bypass.getValue() ? 89 : 80));
            InventoryUtil.switchToSlot(old);
        }
        throwing = false;
    }

    private double roundToClosest(double num, double low, double high) {
        double d1 = num - low;
        double d2 = high - num;

        if (d2 > d1) {
            return low;

        } else {
            return high;
        }
    }
}