
package net.payload.module.modules.exploit;

import net.minecraft.entity.projectile.thrown.EnderPearlEntity;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.play.PlayerInteractItemC2SPacket;
import net.minecraft.network.packet.c2s.play.PlayerMoveC2SPacket;
import net.minecraft.network.packet.c2s.play.UpdateSelectedSlotC2SPacket;
import net.minecraft.util.Hand;
import net.minecraft.util.math.BlockPos;
import net.payload.Payload;
import net.payload.event.events.EntitySpawnEvent;
import net.payload.event.listeners.EntitySpawnListener;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.types.EnumSetting;
import net.payload.utils.player.FindItemResult;
import net.payload.utils.block.BlockPosX;
import net.payload.utils.block.BlockUtils;
import net.payload.utils.player.InvUtils;

import java.util.Comparator;

public class PearlSpoof extends Module implements EntitySpawnListener {

    public enum PearlSpoofMode {
        BlockPlace, LagBack
    }

    private final EnumSetting<PearlSpoofMode> pearlmode = EnumSetting.<PearlSpoofMode>builder()
            .id("pearlspoof_mode")
            .displayName("Mode")
            .defaultValue(PearlSpoofMode.LagBack)
            .build();

    public PearlSpoof() {
        super("PearlSpoof");

        this.setName("PearlSpoof");
        this.setCategory(Category.of("exploit"));
        this.setDescription("Throws a pearl that won't teleport you, meant to bait opponents");

        this.addSetting(pearlmode);

    }

    @Override
    public void onSpawn(EntitySpawnEvent readPacketEvent) {
        if (nullCheck()) return;

        if (pearlmode.getValue() == PearlSpoofMode.LagBack) {
            if (readPacketEvent.getEntity() instanceof EnderPearlEntity)
                MC.world.getPlayers().stream()
                        .min(Comparator.comparingDouble((p) -> p.squaredDistanceTo(readPacketEvent.getEntity().getPos())))
                        .ifPresent((player) -> {
                            if (player.equals(MC.player) && MC.player.isOnGround()) {
                                MC.player.setVelocity(0, 0, 0);
                                MC.player.input.movementForward = 0.0f;
                                MC.player.input.movementSideways = 0.0f;
                                MC.player.networkHandler.sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(MC.player.getX(), MC.player.getY() + 1.0, MC.player.getZ(), false, false));
                            }
                        });
        }
    }


    @Override
    public void onDisable() {
        Payload.getInstance().eventManager.RemoveListener(EntitySpawnListener.class, this);
    }

    @Override
    public void onEnable() {
        if (nullCheck()) return;

        Payload.getInstance().eventManager.AddListener(EntitySpawnListener.class, this);

        if (pearlmode.getValue() == PearlSpoofMode.BlockPlace) {

            int oldSlot = MC.player.getInventory().selectedSlot;

            FindItemResult obby = InvUtils.find(Items.OBSIDIAN);
            FindItemResult echest = InvUtils.find(Items.ENDER_CHEST);
            FindItemResult epearl = InvUtils.find(Items.ENDER_PEARL);

            if (epearl.isHotbar() && (obby.isHotbar() || echest.isHotbar())) {

                if (!obby.found() && echest.found()) {
                    MC.getNetworkHandler().sendPacket(new UpdateSelectedSlotC2SPacket(echest.slot()));
                } else {
                    MC.getNetworkHandler().sendPacket(new UpdateSelectedSlotC2SPacket(obby.slot()));
                }

                BlockPos randomBlockPos = getRandomBlock();
                FindItemResult selectedItem = obby.found() ? obby : echest;

                BlockUtils.place(randomBlockPos, selectedItem, false, 0, false);

                MC.getNetworkHandler().sendPacket(new UpdateSelectedSlotC2SPacket(epearl.slot() == 1 ? epearl.slot() + 1 : epearl.slot() - 1));
                MC.getNetworkHandler().sendPacket(new UpdateSelectedSlotC2SPacket(epearl.slot()));
                sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, MC.player.getYaw(), MC.player.getPitch()));
                MC.getNetworkHandler().sendPacket(new UpdateSelectedSlotC2SPacket(oldSlot));

            } else if (!epearl.isHotbar()) {
                sendChatMessage("Missing EnderPearl in hotbar");
            } else {
                sendChatMessage("Missing Enderchest or Obsidian in hotbar");
            }
            this.toggle();
        }
    }

    @Override
    public void onToggle() {

    }

    private BlockPos getRandomBlock() {
        return new BlockPosX(MC.player.getX() + Math.random() * 4, MC.player.getY() + Math.random() * 3, MC.player.getZ() + Math.random() * 4);
    }
}